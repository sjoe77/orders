<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Orders" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%# Include Beer CSS %>
    <link href="https://cdn.jsdelivr.net/npm/beercss@3.11.32/dist/cdn/beer.min.css" rel="stylesheet">
    <script type="module" src="https://cdn.jsdelivr.net/npm/beercss@3.11.32/dist/cdn/beer.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/material-dynamic-colors@1.1.2/dist/cdn/material-dynamic-colors.min.js"></script>
    <%= javascript_importmap_tags %>
    
    <!-- Fallback script for drawer if Stimulus fails to load -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const drawer = document.querySelector('[data-app-shell-target="drawer"]');
        const content = document.querySelector('[data-app-shell-target="content"]');
        const toggleButton = document.querySelector('button[data-action*="toggleDrawer"]');
        
        let isDrawerOpen = false;
        
        // Initialize drawer based on localStorage (only if Stimulus not loaded)
        function initializeDrawer() {
          if (drawer && content) {
            const storedState = localStorage.getItem('drawerOpen');
            isDrawerOpen = storedState === 'true';
            
            if (isDrawerOpen) {
              drawer.style.transform = 'translateX(0)';
              if (window.innerWidth > 768) {
                content.style.marginLeft = '320px';
              }
            } else {
              drawer.style.transform = 'translateX(-100%)';
              content.style.marginLeft = '0px';
            }
            console.log('Fallback: Drawer initialized from localStorage:', storedState);
          }
        }
        
        // Toggle drawer function
        function toggleDrawer() {
          if (!drawer || !content) return;
          
          isDrawerOpen = !isDrawerOpen;
          
          if (isDrawerOpen) {
            // Open drawer
            drawer.style.transform = 'translateX(0)';
            if (window.innerWidth > 768) {
              content.style.marginLeft = '320px';
            }
            localStorage.setItem('drawerOpen', 'true');
            console.log('Fallback: Drawer opened');
          } else {
            // Close drawer
            drawer.style.transform = 'translateX(-100%)';
            content.style.marginLeft = '0px';
            localStorage.setItem('drawerOpen', 'false');
            console.log('Fallback: Drawer closed');
          }
        }
        
        // Check if Stimulus connects, if not, add our own event listeners
        setTimeout(function() {
          if (!window.stimulusConnected) {
            console.log('Stimulus not loaded, using fallback controls');
            
            // Initialize drawer only if Stimulus failed to load
            initializeDrawer();
            
            // Add click handler to hamburger button
            if (toggleButton) {
              toggleButton.addEventListener('click', function(e) {
                e.preventDefault();
                toggleDrawer();
              });
            }
            
            // Add ESC key handler
            document.addEventListener('keydown', function(e) {
              if (e.key === 'Escape' && isDrawerOpen) {
                toggleDrawer();
              }
            });
            
            // Add click handlers to navigation links
            const navLinks = document.querySelectorAll('[data-action*="navigateAndClose"]');
            navLinks.forEach(link => {
              link.addEventListener('click', function() {
                // Close drawer on mobile after navigation
                if (window.innerWidth <= 768 && isDrawerOpen) {
                  setTimeout(() => toggleDrawer(), 100);
                }
              });
            });
          } else {
            console.log('Stimulus loaded successfully, using Stimulus controller');
          }
        }, 200);
      });
    </script>
  </head>

  <body data-controller="app-shell">
    <!-- Top App Bar -->
    <header class="fixed">
      <nav>
        <button class="circle transparent" data-action="click->app-shell#toggleDrawer">
          <i>menu</i>
        </button>
        <h5>Orders</h5>
        <div class="max"></div>
        <button class="circle transparent">
          <i>account_circle</i>
        </button>
        <button class="circle transparent" data-action="click->app-shell#toggleTheme" data-app-shell-target="themeToggle">
          <i>light_mode</i>
        </button>
        <button class="circle transparent">
          <i>logout</i>
        </button>
      </nav>
    </header>

    <!-- Left Navigation Drawer -->
    <nav class="left max" data-app-shell-target="drawer" style="transform: translateX(-100%);">
      <a href="/" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/' %>">
        <i>home</i>
        <div>Home</div>
      </a>
      <a href="/orders" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/orders' %>">
        <i>receipt</i>
        <div>Orders</div>
      </a>
      <a href="/customers" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/customers' %>">
        <i>people</i>
        <div>Customers</div>
      </a>
      <a href="/products" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/products' %>">
        <i>inventory</i>
        <div>Products</div>
      </a>
      <div class="divider"></div>
      <a href="/settings" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/settings' %>">
        <i>settings</i>
        <div>Settings</div>
      </a>
      <a href="/help" data-action="click->app-shell#navigateAndClose" class="<%= 'active' if request.path == '/help' %>">
        <i>help</i>
        <div>Help</div>
      </a>
    </nav>

    <!-- Main Content Area -->
    <main class="responsive" data-app-shell-target="content" style="margin-top: 64px;">
      <%= yield %>
    </main>
  </body>
</html>
